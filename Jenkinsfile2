// This build is parameterized :
// - PROJECT_PATH : string parameter
// - INTERNET : choice parameter true/false
//Jenkins plugins :
// - Pipeline: Model Definition
// - Static Analysis Utilities + checkstyle plugin
// - pmd plugin
// - Robot Framework plugin

pipeline {
    agent label:'master'
    stages {

        stage("Clean") {
            notifySlack("#CCCCCC", "Build started")

            sh 'rm -rf build/'
            sh 'mkdir build/'
            sh 'mkdir build/logs/'
        }
        
        stage("InitDB") { 
            dir("${PROJECT_PATH}") {
                sh 'php bin/console doctrine:database:drop --force --no-interaction'
                sh 'php bin/console doctrine:database:create --no-interaction'
                sh 'php bin/console doctrine:schema:create --no-interaction'
                sh 'php bin/console doctrine:fixtures:load --no-interaction'
            }
        }
    
        stage("Update") {
            composerUpdate()
        }
            
        stage("Check") {
            dir("${PROJECT_PATH}") {
                sh 'vendor/bin/php-cs-fixer fix --config=sf23 --fixers=-declare_equal_normalize . || true'
                sh 'vendor/bin/parallel-lint src/'
            }
            runPhpcs()
            runPhpmd()
        }
        
        stage("Unit Tests") {
            runUnitTests()
        }
        
        stage("RF Tests") {
            runRFTests()
        }
    }
    postBuild {
        success {
            notifySlack("good", "Build ended successfully")
        }
        failure {
            notifySlack("danger", "Build failed")
        }
        unstable {
            notifySlack("warning", "Build unstable")
        }
    }
}

def composerUpdate() {
    boolean internet = INTERNET.toBoolean()
    if (internet) {
        dir("${PROJECT_PATH}") {
            sh 'php bin/composer self-update'
            sh 'php bin/composer update'
        }
    } else {
        echo "No Internet - composer not updated !"
    }
}

def runPhpcs() {
    def workspace = pwd()
    try {
        dir("${PROJECT_PATH}") {
            sh "vendor/bin/phpcs -v --ignore=src/AppBundle/Tests/* --report=checkstyle --report-file=${workspace}/build/logs/checkstyle.xml --standard=Standards/ruleset-cs.xml --extensions=php src/"
        }
    } catch (err) {
        currentBuild.result = 'FAILURE'
    }
    finally {
        step([$class: 'CheckStylePublisher', pattern: "build/logs/checkstyle.xml", canRunOnFailed: true])
    }
}

def runPhpmd() {
    def workspace = pwd()
    try {
        dir("${PROJECT_PATH}") {
            sh "vendor/bin/phpmd src/ xml Standards/ruleset-pmd.xml --reportfile ${workspace}/build/logs/pmd.xml --exclude DataFixtures,Tests"
        }
    } catch (err) {
        currentBuild.result = 'FAILURE'
    }
    finally {
        step([$class: 'PmdPublisher', pattern: "build/logs/pmd.xml", canRunOnFailed: true])
    }
}
def runUnitTests() {
    def workspace = pwd()
    try {
        dir("${PROJECT_PATH}") {
            sh "vendor/bin/phpunit --log-junit ${workspace}/build/logs/phpunit-junit.xml"
        }
    }
    catch (err) {
        junit 'build/logs/phpunit-junit.xml'
        throw err
    }    
}

def runRFTests() {
    def workspace = pwd()
    try {
        dir("${PROJECT_PATH}") {
            sh "robot -d ${workspace}/build/logs --xunit rf-junit.xml -v PROJECT_DIR:. -v REMOTE:True -v HUB:http://localhost:4444/wd/hub -v BROWSER:gc src/AppBundle/Tests/RFTests"
        }
    }
    finally {
        junit 'build/logs/*-junit.xml'
        step([$class: 'RobotPublisher', disableArchiveOutput: false, logFileName: 'log.html', onlyCritical: true, otherFiles: '*.png', outputFileName: 'output.xml', outputPath: 'build/logs/', passThreshold: 90, reportFileName: 'report.html', unstableThreshold: 100])
    }
}

def notifySlack(String color, String message) {
    boolean internet = INTERNET.toBoolean()
    if (internet) {
        dir("${PROJECT_PATH}") {
            withCredentials([[$class: 'StringBinding', credentialsId: 'a7f52ea9-a4ae-4f38-945c-cca2942765aa', variable: 'TOKEN']]) {
                sh "bin/slackSend \"${env.JOB_NAME}\" \"${color}\" \"${message} : ${env.JOB_NAME} ${env.BUILD_NUMBER}\" \"${TOKEN}\""
            }
        }
    } else {
        echo "No Internet - no slack notifications !"
    }
}
